package com.example.transferservice.controllers;

import com.example.transferservice.entities.Balances;
import com.example.transferservice.entities.Failure;
import com.example.transferservice.entities.Transactions;
import com.example.transferservice.repositories.BalanceRepository;
import com.example.transferservice.repositories.TransactionsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;

@Controller // This means that this class is a Controller
@RequestMapping(path="/account") // This means URL's start with /account (after Application path)
public class MainController {
    @Autowired // This means to get the bean called transactionsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
     TransactionsRepository transactionsRepository;
    @Autowired // This means to get the bean called balanceRepository
    // Which is auto-generated by Spring, we will use it to handle the data
     BalanceRepository balanceRepository;

    @PostMapping(path="/transfer") // Map ONLY POST Requests
    public @ResponseBody
    Object transferToAccount (@RequestParam String from, @RequestParam String to
            , @RequestParam Integer amount) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Balances balance = getSingleBalance(from);
        Integer availableBalance =  balance.getBalance();
        if(availableBalance > amount){
            saveTransactions(amount, from);
            saveFromBalance(amount, from);
            saveToBalance(amount, to);
            return getSingleBalance(from);
        }else if(availableBalance < amount){
            return new Failure("Error","Insufficient Balance");
        }
        return  new Failure("Error","Something went wrong");
    }

    @GetMapping(path="/transactions")
    public @ResponseBody Iterable<Transactions> getAllTransactions() {
        // This returns a JSON or XML with the users
        return transactionsRepository.findAll();
    }

    @GetMapping(path="/balances")
    public @ResponseBody Iterable<Balances> getAllBalances() {
        // This returns a JSON or XML with the users
        return balanceRepository.findAll();
    }

    @GetMapping(path="/balances/{accountNumber}")
    public @ResponseBody Balances getSingleBalance(@PathVariable("accountNumber") String accountNumber) {
        // This returns a JSON or XML with the users
        return balanceRepository.findByAccountNumber(accountNumber);
    }


    private void saveTransactions(Integer amount, String from){
        Transactions n = new Transactions();
        Instant instant = Instant.now();
        long timeStampSeconds = instant.getEpochSecond();
        String reference = "transfer/" + timeStampSeconds + "/account";
        n.setReference(reference);
        n.setAmount(amount);
        n.setAccountNumber(from);
        transactionsRepository.save(n);
    }

    private void saveFromBalance(Integer amount, String from){
        Balances n = getSingleBalance(from);
        Integer availableBalance =  n.getBalance();
        n.setBalance(availableBalance - amount);
        balanceRepository.save(n);
    }

    private void saveToBalance(Integer amount, String to){
        Balances n = getSingleBalance(to);
        Integer availableBalance =  n.getBalance();
        n.setBalance(availableBalance + amount);
        balanceRepository.save(n);
    }
}